var e=require("@onflow/fcl-config"),n=require("@onflow/config"),r=require("fs"),t=require("path"),o=require("@onflow/types"),s=require("@onflow/fcl"),c=require("flow-cadut"),a=require("elliptic"),i=require("sha3"),u=require("rlp");function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function d(e){if(e&&e.__esModule)return e;var n=Object.create(null);return e&&Object.keys(e).forEach(function(r){if("default"!==r){var t=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,t.get?t:{enumerable:!0,get:function(){return e[r]}})}}),n.default=e,n}var g=l(r),m=l(t),f=d(o),p=d(s),h=d(u);const P=(e,n,r)=>{if("string"==typeof n)return P(e,n.split("/"),r);if(!n.length)return e;try{const[t,...o]=n;return P(e[t],o,r)}catch(e){return r}},v=(r,t,o,s)=>{let c=P(e.flowConfig(),o,s);c||(c=s),n.config().put(r,c)},M=e=>null==e?null:e.replace(/^0x/,""),A=e=>null==e?null:"0x"+M(e),y=new a.ec("p256"),b=(e,n)=>{const r=y.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const n=new i.SHA3(256);return n.update(Buffer.from(e,"hex")),n.digest()})(n)),t=r.r.toArrayLike(Buffer,"be",32),o=r.s.toArrayLike(Buffer,"be",32);return Buffer.concat([t,o]).toString("hex")},x=(e,r=0)=>function(t={}){try{return Promise.resolve(n.config().get("SERVICE_ADDRESS")).then(function(o){return Promise.resolve(n.config().get("PRIVATE_KEY")).then(function(n){return e=M(e||o),{...t,tempId:`${e}-${r}`,addr:p.sansPrefix(e),keyId:r,signingFunction:function(t){try{return Promise.resolve({keyId:r,addr:A(e),signature:b(n,t.message)})}catch(e){return Promise.reject(e)}}}})})}catch(e){return Promise.reject(e)}},w=e=>"object"==typeof e&&null!==e,S=(e,n)=>{const r=e[e.length-1];return e.slice(0,-1).map(e=>n(e,r))},T=(e,n)=>{if(0===e.length)return[];const r=e[0];return Array.isArray(r)&&r[r.length-1].asArgument?(e=>e.reduce((e,n)=>[...e,...S(n,(e,n)=>p.arg(e,n))],[]))(e):c.mapValuesToCode(n,e)},k=e=>function(n){try{function r(){function e(){return Promise.resolve(ue()).then(function(e){const r={...Ae,...n,FlowManager:e};return t=ve(t,r),{code:t,signers:s,args:c}})}let n;const r=function(){if(!a)return Promise.resolve(Me(t)).then(function(e){n=e});n=Ae}();return r&&r.then?r.then(e):e()}let t,o,s,c,a;if(w(n[0])){const[e]=n,{name:r,code:i,args:u,signers:l,service:d=!1}=e;if(a=d,!r&&!i)throw Error("Both `name` and `code` are missing. Provide either of them");o=r,t=i,s=l,c=u}else"script"===e?[o,c]=n:[o,s,c]=n;const i=function(){if(o)return Promise.resolve(("script"===e?Te:Se)({name:o})).then(function(e){t=e})}();return Promise.resolve(i&&i.then?i.then(r):r())}catch(e){return Promise.reject(e)}},j=function(){try{const e=arguments,n=k("tx");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n,signers:r}){const t=x(),o=[p.transaction(e),p.payer(t),p.proposer(t),p.limit(999)];if(r){const e=r.map(e=>x(e));o.push(p.authorizations(e))}else o.push(p.authorizations([t]));return n&&o.push(p.args(T(n,e))),Promise.resolve(p.send(o)).then(function(e){return Promise.resolve(p.tx(e).onceExecuted())})})}catch(e){return Promise.reject(e)}},E=function(){try{const e=arguments,n=k("script");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n}){const r=[p.script(e)];return n&&r.push(p.args(T(n,e))),Promise.resolve(p.send(r)).then(function(e){return p.decode(e)})})}catch(e){return Promise.reject(e)}},F="\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n \n",I=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(F,r,"createAccount =>"),c.replaceImportAddresses(F,r)})}catch(e){return Promise.reject(e)}},C=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(I(e)).then(function(e){return c.reportMissing("arguments",n.length,3,C),c.reportMissing("signers",r.length,1,C),j({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},R="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n",B=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(R,r,"deployContract =>"),c.replaceImportAddresses(R,r)})}catch(e){return Promise.reject(e)}},D=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(B(e)).then(function(e){return c.reportMissing("arguments",n.length,3,D),c.reportMissing("signers",r.length,1,D),j({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},_='\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: "FlowManager",\n           code: code.decodeHex(),\n        )\n   }\n}\n\n',$=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(_,r,"initManager =>"),c.replaceImportAddresses(_,r)})}catch(e){return Promise.reject(e)}},q=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve($(e)).then(function(e){return c.reportMissing("arguments",n.length,1,q),c.reportMissing("signers",r.length,1,q),j({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},H='\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic("Signer is not the token admin")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic("Unable to borrow receiver reference")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n',L=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(H,r,"mintTokens =>"),c.replaceImportAddresses(H,r)})}catch(e){return Promise.reject(e)}},O=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(L(e)).then(function(e){return c.reportMissing("arguments",n.length,2,O),c.reportMissing("signers",r.length,1,O),j({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},V="\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n",G=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(V,r,"registerContract =>"),c.replaceImportAddresses(V,r)})}catch(e){return Promise.reject(e)}},K=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(G(e)).then(function(e){return c.reportMissing("arguments",n.length,2,K),c.reportMissing("signers",r.length,1,K),j({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},N="\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n",z=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(N,r,"scratch =>"),c.replaceImportAddresses(N,r)})}catch(e){return Promise.reject(e)}},U=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(z(e)).then(function(e){return c.reportMissing("arguments",n.length,0,U),c.reportMissing("signers",r.length,1,U),j({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},Y="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",W=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(Y,r,"updateContract =>"),c.replaceImportAddresses(Y,r)})}catch(e){return Promise.reject(e)}},J=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(W(e)).then(function(e){return c.reportMissing("arguments",n.length,3,J),c.reportMissing("signers",r.length,1,J),j({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}};var Q={createAccount:C,createAccountTemplate:I,deployContract:D,deployContractTemplate:B,initManager:q,initManagerTemplate:$,mintTokens:O,mintTokensTemplate:L,registerContract:K,registerContractTemplate:G,scratch:U,scratchTemplate:z,updateContract:J,updateContractTemplate:W};const{updateContractTemplate:X,deployContractTemplate:Z}=Q,ee=e=>Buffer.from(e,"utf8").toString("hex"),ne=function(e){try{let n,r,t,o,s;if(w(e[0])){const[c]=e,{name:a,to:i,addressMap:u,args:l,update:d}=c;if(!a)throw Error("'name' field is missing");n=a,r=i,o=l,t=u,s=d}else[n,r,t,o,s]=e;return Promise.resolve(ue()).then(function(e){const c={...Ae,FlowManager:e,...t};return{name:n,to:r,args:o,update:s,addressMap:c}})}catch(e){return Promise.reject(e)}},re=function(e){try{function n(e){return Promise.resolve(ue()).then(function(n){const r=ee(t),a={FlowManager:n};return Promise.resolve(c?X(a):Z(a)).then(function(t){let c=[[o,r,f.String],[n,f.Address]];if(s){c=c.concat(s);let e=0;const n=[],r=s.reduce((r,t)=>[...r,...S(t,(r,t)=>{const o="abcdefghijklmnopqrstuvwxyz"[e];return e+=1,n.push(o),`${o}:${t.label}`})],[]);t=(t=t.replace("##ARGS-WITH-TYPES##",`, ${r}`)).replace("##ARGS-LIST##",n)}else t=(t=t.replace("##ARGS-WITH-TYPES##","")).replace("##ARGS-LIST##","");return j({code:t,args:c,signers:[e]})})})}const{to:r,code:t,name:o,args:s,update:c}=e;return Promise.resolve(r?n(r):Promise.resolve(ue()).then(n))}catch(e){return Promise.reject(e)}},te="\n  pub contract FlowManager {\n\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    init(){\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n",oe="\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty. The script will throw error if FlowManager is not\n    // added to service address\n}\n\n",se="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n",ce='\n  // This script reads the balance field of an account\'s FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic("Could not borrow Balance reference to the Vault")\n\n    return vaultRef.balance\n}\n',ae="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n";var ie=Q;const ue=function(){try{return Promise.resolve(n.config().get("SERVICE_ADDRESS")).then(A)}catch(e){return Promise.reject(e)}},le=function(){try{return Promise.resolve(ue()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(oe,r,"checkManager =>"),c.replaceImportAddresses(oe,r)})}catch(e){return Promise.reject(e)}}({FlowManager:e})).then(function(e){const n=function(n,r){try{var t=Promise.resolve(E({code:e,service:!0})).then(function(){})}catch(e){return r()}return t&&t.then?t.then(void 0,r):t}(0,function(){return Promise.resolve(function(){try{return Promise.resolve(ie.initManagerTemplate()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(te,r,"FlowManager =>"),c.replaceImportAddresses(te,r)})}catch(e){return Promise.reject(e)}}()).then(function(n){const r=ee(n);return Promise.resolve(j({code:e,args:[[r,f.String]],service:!0})).then(function(){})})})}catch(e){return Promise.reject(e)}}()).then(function(){})});return n&&n.then?n.then(function(){return ue()}):ue()})})}catch(e){return Promise.reject(e)}},de=function(e,n=!1){try{if(n){const n=Ae[e];if(void 0!==n)return Promise.resolve(n)}return Promise.resolve(le()).then(function(n){const r={FlowManager:n};let t;const o=function(o,s){try{var a=Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(ae,r,"getContractAddress =>"),c.replaceImportAddresses(ae,r)})}catch(e){return Promise.reject(e)}}(r)).then(function(r){return Promise.resolve(E({code:r,args:[[e,f.String],[n,f.Address]],service:!0})).then(function(e){t=e})})}catch(e){return s(e)}return a&&a.then?a.then(void 0,s):a}(0,function(e){console.error("failed to get account address:",e)});return o&&o.then?o.then(function(){return t}):t})}catch(e){return Promise.reject(e)}};function ge(e,n,r){if(!e.s){if(r instanceof fe){if(!r.s)return void(r.o=ge.bind(null,e,n));1&n&&(n=r.s),r=r.v}if(r&&r.then)return void r.then(ge.bind(null,e,n),ge.bind(null,e,2));e.s=n,e.v=r;const t=e.o;t&&t(e)}}const me=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,fe=function(){function e(){}return e.prototype.then=function(n,r){const t=new e,o=this.s;if(o){const e=1&o?n:r;if(e){try{ge(t,1,e(this.v))}catch(e){ge(t,2,e)}return t}return this}return this.o=function(e){try{const o=e.v;1&e.s?ge(t,1,n?n(o):o):r?ge(t,1,r(o)):ge(t,2,o)}catch(e){ge(t,2,e)}},t},e}(),pe=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),he=(e,n)=>{const[r,t]=n;return e[r]=t,e},Pe=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(pe).reduce(he,{}):{},ve=(e,n,r=!0)=>e.replace(me,(e,t,o,s,c)=>{const a=r?o:c;return`${t}${o} from ${n instanceof Function?n(a):n[a]}`}),Me=function(e){try{const n={},r=function(e,r,t){var o=[];for(var s in e)o.push(s);return function(e,n,r){var t,o,s=-1;return function r(c){try{for(;++s<e.length;)if((c=n(s))&&c.then){if(!((a=c)instanceof fe&&1&a.s))return void c.then(r,o||(o=ge.bind(null,t=new fe,2)));c=c.v}t?ge(t,1,c):t=c}catch(e){ge(t||(t=new fe),2,e)}var a}(),t}(o,function(e){return function(e){const r=function(){if(!Ae[e])return Promise.resolve(de(e)).then(function(r){n[e]=r});n[e]=Ae[e]}();if(r&&r.then)return r.then(function(){})}(o[e])})}(Pe(e));return Promise.resolve(r&&r.then?r.then(function(){return n}):n)}catch(e){return Promise.reject(e)}},Ae={FlowToken:"0x0ae53cb6e3f42a79",FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7"},ye={"0xe5a8b7f23e8b548f":"0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7":"0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79":"0x0ae53cb6e3f42a79","0xee82856bf20e2aa6":"0xee82856bf20e2aa6"},be=function(e,r="./transactions/"){try{return Promise.resolve(n.config().get("BASE_PATH")).then(function(n){return m.default.resolve(n,`${r}/${e}.cdc`)})}catch(e){return Promise.reject(e)}},xe=(e,n={},r=!1)=>{const t=(e=>g.default.readFileSync(e,"utf8"))(e);return n?ve(t,{...r?ye:Ae,...n}):t},we=function({name:e,addressMap:n}){try{return Promise.resolve(be(e,"./contracts/")).then(function(e){return xe(e,n)})}catch(e){return Promise.reject(e)}},Se=function({name:e,addressMap:n}){try{return Promise.resolve(be(e,"./transactions/")).then(function(e){return xe(e,n)})}catch(e){return Promise.reject(e)}},Te=function({name:e,addressMap:n}){try{return Promise.resolve(be(e,"./scripts/")).then(function(e){return xe(e,n)})}catch(e){return Promise.reject(e)}},ke={ExampleToken:Ae.FlowToken},je=e=>e[0].toLowerCase()+e.slice(1);function Ee(e,n){try{var r=e()}catch(e){return n(e)}return r&&r.then?r.then(void 0,n):r}const{expect:Fe}=global,Ie=function(e){try{let r;function n(n){return r?n:Promise.resolve(e)}const t=function(){if("function"==typeof e)return r=1,Promise.resolve(e())}();return Promise.resolve(t&&t.then?t.then(n):n(t))}catch(e){return Promise.reject(e)}},{spawn:Ce}=require("child_process");var Re=new class{constructor(){this.initialized=!1,this.logging=!0}setLogging(e){this.logging=e}log(e,n="log"){this.logging&&console[n](e)}start(e=8080,n=!1){try{const r=this;let t=e-8080+3569;return r.logging=n,r.process=Ce("flow",["emulator","-v","--http-port",e,"--port",t]),Promise.resolve(new Promise((e,n)=>{r.process.stdout.on("data",n=>{r.log(`LOG: ${n}`),n.includes("Starting HTTP server")&&(r.log("EMULATOR IS UP! Listening for events!"),r.initialized=!0,e(!0))}),r.process.stderr.on("data",e=>{r.log(`ERROR: ${e}`,"error"),r.initialized=!1,n()}),r.process.on("close",n=>{r.log(`emulator exited with code ${n}`),r.initialized=!1,e(!0)})}))}catch(e){return Promise.reject(e)}}stop(){try{const e=this;return Promise.resolve(new Promise(n=>{e.process.kill(),setTimeout(()=>{e.initialized=!1,n(!0)},50)}))}catch(e){return Promise.reject(e)}}};exports.deployContract=re,exports.deployContractByName=function(){try{return Promise.resolve(ne([].slice.call(arguments))).then(function(e){function n(e){return Promise.resolve(we({name:t,addressMap:o})).then(function(n){return re({to:e,code:n,name:t,args:s,update:c})})}const{to:r,name:t,addressMap:o,args:s,update:c=!1}=e;return r?n(r):Promise.resolve(ue()).then(n)})}catch(e){return Promise.reject(e)}},exports.emulator=Re,exports.executeScript=E,exports.extractImports=Pe,exports.getAccountAddress=function(e){try{const r=e||`deployment-account-${(Math.random()*Math.pow(10,8)).toFixed(0)}`;return Promise.resolve(le()).then(function(e){function t(){const t=function(){if(null===s){const t=Ee(function(){return Promise.resolve(ie.createAccountTemplate(o)).then(function(t){return Promise.resolve(function(){try{const e=y.keyFromPrivate,r=Buffer,t=r.from;return Promise.resolve(n.config().get("PRIVATE_KEY")).then(function(n){const o=e.call(y,t.call(r,n,"hex")).getPublic("hex").replace(/^04/,"");return h.encode([Buffer.from(o,"hex"),2,3,1e3]).toString("hex")})}catch(e){return Promise.reject(e)}}()).then(function(n){return Promise.resolve(j({code:t,args:[[r,n,f.String],[e,f.Address]]})).then(function({events:e}){const n=e.find(e=>e.type.includes("AccountAdded"));s=n.data.address})})})},function(e){console.error(e)});if(t&&t.then)return t.then(function(){})}}();return t&&t.then?t.then(function(){return s}):s}const o={FlowManager:e};let s;const a=Ee(function(){return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(se,r,"getAccountAddress =>"),c.replaceImportAddresses(se,r)})}catch(e){return Promise.reject(e)}}(o)).then(function(n){return Promise.resolve(E({code:n,args:[[r,f.String],[e,f.Address]],service:!0})).then(function(e){s=e})})},function(e){console.error("failed to get account address:",e)});return a&&a.then?a.then(t):t()})}catch(e){return Promise.reject(e)}},exports.getConfigValue=function(e){try{return Promise.resolve(n.config().get(e))}catch(e){return Promise.reject(e)}},exports.getContractAddress=de,exports.getContractCode=we,exports.getFlowBalance=function(e){try{return Promise.resolve(function(e){try{return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const r={...n,...e};return c.reportMissingImports(ce,r,"getBalance =>"),c.replaceImportAddresses(ce,r)})}catch(e){return Promise.reject(e)}}(ke)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:je(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(n){const r=ve(n,Ae);return E({code:r,args:[[e,f.Address]]})})}catch(e){return Promise.reject(e)}},exports.getScriptCode=Te,exports.getServiceAddress=ue,exports.getTemplate=xe,exports.getTransactionCode=Se,exports.init=function(e,r={}){try{const{port:t=8080}=r,{pkey:o="48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902"}=r;return v("PRIVATE_KEY",process,"accounts/emulator-account/key",o),v("SERVICE_ADDRESS",process,"accounts/emulator-account/address","f8d6e0586b0a20c7"),n.config().put("accessNode.api",`http://localhost:${t}`),v("BASE_PATH",process,"resolve/basePath",e),Promise.resolve()}catch(e){return Promise.reject(e)}},exports.mintFlow=function(e,n){try{return Promise.resolve(function(e){try{return Promise.resolve(ie.mintTokensTemplate(ke)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:je(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(r){const t=ve(r,Ae);return j({code:t,args:[[e,f.Address],[n,f.UFix64]]})})}catch(e){return Promise.reject(e)}},exports.promise=Ie,exports.replaceImportAddresses=ve,exports.resolveImports=Me,exports.sendTransaction=j,exports.set=v,exports.shallPass=function(e){try{const n=Ie(e);return Promise.resolve(Fe(n).resolves.not.toBe(null)).then(function(){return Promise.resolve(Fe(n).resolves.not.toThrow()).then(function(){return n.then(({status:e,errorMessage:n})=>{Fe(e).toBe(4),Fe(n).toBe("")}),n})})}catch(e){return Promise.reject(e)}},exports.shallResolve=function(e){try{const n=Ie(e);return Promise.resolve(Fe(n).resolves.not.toThrow()).then(function(){return n})}catch(e){return Promise.reject(e)}},exports.shallRevert=function(e){try{const n=Ie(e);return Promise.resolve(Fe(n).rejects.not.toBe(null)).then(function(){})}catch(e){return Promise.reject(e)}},exports.shallThrow=function(e){try{const n=Ie(e);return Promise.resolve(Fe(n).rejects.not.toBe(null)).then(function(){return Promise.resolve(Fe(n).rejects.toThrow()).then(function(){})})}catch(e){return Promise.reject(e)}};
//# sourceMappingURL=index.js.map
