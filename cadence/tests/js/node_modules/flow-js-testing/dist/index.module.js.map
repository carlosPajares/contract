{"version":3,"file":"index.module.js","sources":["../src/config.js","../src/init.js","../src/address.js","../src/crypto.js","../src/utils.js","../src/interaction.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/deploy-code.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getContractAddress.js","../src/generated/scripts/index.js","../src/generated/index.js","../src/manager.js","../src/contract.js","../src/imports.js","../src/file.js","../src/templates.js","../src/flow-token.js","../src/account.js","../src/jest-asserts.js","../src/emulator.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  let value = get(flowConfig(), conf, fallback);\n  if (!value) {\n    value = fallback;\n  }\n  config().put(key, value);\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} [props.port] - port to use for accessAPI\n * @param {number} [props.pkey] - private key to use for service account in case of collisions\n */\nexport const init = async (basePath, props = {}) => {\n  const { port = 8080 } = props;\n  const { pkey = \"48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902\" } = props;\n\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/key\", pkey);\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"resolve/basePath\", basePath);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isObject = (arg) => typeof arg === \"object\" && arg !== null;\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { mapValuesToCode } from \"flow-cadut\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode, defaultsByName } from \"./file\";\nimport { resolveImports, replaceImportAddresses } from \"./imports\";\nimport { getServiceAddress } from \"./manager\";\nimport { isObject } from \"./utils\";\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst mapArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nconst resolveArguments = (args, code) => {\n  if (args.length === 0) {\n    return [];\n  }\n\n  // We can check first element in array. If it's last value is instance\n  // of @onflow/types then we assume that the rest of them are also unprocessed\n  const first = args[0];\n  if (Array.isArray(first)) {\n    const last = first[first.length - 1];\n    if (last.asArgument) {\n      return mapArgs(args);\n    }\n  }\n  // Otherwise we process them and try to match them against the code\n  return mapValuesToCode(code, args);\n};\n\nconst extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixService;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, code, args, signers, service = false } = props;\n\n      ixService = service;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      ixName = name;\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n    } else {\n      if (ixType === \"script\") {\n        [ixName, ixArgs] = params;\n      } else {\n        [ixName, ixSigners, ixArgs] = params;\n      }\n    }\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({ name: ixName });\n    }\n\n    // We need a way around to allow initial scripts and transactions for Manager contract\n    let deployedContracts;\n    if (ixService) {\n      deployedContracts = defaultsByName;\n    } else {\n      deployedContracts = await resolveImports(ixCode);\n    }\n\n    const serviceAddress = await getServiceAddress();\n    const addressMap = {\n      ...defaultsByName,\n      ...deployedContracts,\n      FlowManager: serviceAddress,\n    };\n\n    ixCode = replaceImportAddresses(ixCode, addressMap);\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\nexport const sendTransaction = async (...props) => {\n  const extractor = extractParameters(\"tx\");\n  const { code, args, signers } = await extractor(props);\n\n  const serviceAuth = authorization();\n\n  // set repeating transaction code\n  const ix = [\n    fcl.transaction(code),\n    fcl.payer(serviceAuth),\n    fcl.proposer(serviceAuth),\n    fcl.limit(999),\n  ];\n\n  // use signers if specified\n  if (signers) {\n    const auths = signers.map((address) => authorization(address));\n    ix.push(fcl.authorizations(auths));\n  } else {\n    // and only service account if no signers\n    ix.push(fcl.authorizations([serviceAuth]));\n  }\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return await fcl.tx(response).onceExecuted();\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\nexport const executeScript = async (...props) => {\n  const extractor = extractParameters(\"script\");\n  const { code, args } = await extractor(props);\n\n  const ix = [fcl.script(code)];\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return fcl.decode(response);\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n \n`;\n\n/**\n * Method to generate cadence code for createAccount transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends createAccount transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const createAccount = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, createAccount);\n  reportMissing(\"signers\", signers.length, 1, createAccount);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for deployContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends deployContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const deployContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, deployContract);\n  reportMissing(\"signers\", signers.length, 1, deployContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n}\n\n`;\n\n/**\n * Method to generate cadence code for initManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends initManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const initManager = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, initManager);\n  reportMissing(\"signers\", signers.length, 1, initManager);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for mintTokens transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends mintTokens transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const mintTokens = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, mintTokens);\n  reportMissing(\"signers\", signers.length, 1, mintTokens);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for registerContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends registerContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const registerContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, registerContract);\n  reportMissing(\"signers\", signers.length, 1, registerContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for scratch transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends scratch transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const scratch = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, scratch);\n  reportMissing(\"signers\", signers.length, 1, scratch);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for updateContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends updateContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const updateContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, updateContract);\n  reportMissing(\"signers\", signers.length, 1, updateContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccount,\n  createAccountTemplate,\n  deployContract,\n  deployContractTemplate,\n  initManager,\n  initManagerTemplate,\n  mintTokens,\n  mintTokensTemplate,\n  registerContract,\n  registerContractTemplate,\n  scratch,\n  scratchTemplate,\n  updateContract,\n  updateContractTemplate,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { unwrap, sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { defaultsByName, getContractCode } from \"./file\";\n\nimport txRegistry from \"./generated/transactions\";\nimport { isObject } from \"./utils\";\n\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nconst extractParameters = async (params) => {\n  let ixName, ixTo, ixAddressMap, ixArgs, ixUpdate;\n\n  if (isObject(params[0])) {\n    const [props] = params;\n    const { name, to, addressMap, args, update } = props;\n\n    if (!name) {\n      throw Error(\"'name' field is missing\");\n    }\n\n    ixName = name;\n    ixTo = to;\n    ixArgs = args;\n    ixAddressMap = addressMap;\n    ixUpdate = update;\n  } else {\n    [ixName, ixTo, ixAddressMap, ixArgs, ixUpdate] = params;\n  }\n\n  const serviceAddress = await getServiceAddress();\n  const addressMap = {\n    ...defaultsByName,\n    FlowManager: serviceAddress,\n    ...ixAddressMap,\n  };\n\n  return {\n    name: ixName,\n    to: ixTo,\n    args: ixArgs,\n    update: ixUpdate,\n    addressMap,\n  };\n};\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (...props) => {\n  const params = await extractParameters(props);\n  const { to, name, addressMap, args, update = false } = params;\n\n  const resolvedAddress = to || (await getServiceAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getServiceAddress());\n  const managerAddress = await getServiceAddress();\n  const hexedCode = hexContract(contractCode);\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [\n    [name, hexedCode, t.String],\n    [managerAddress, t.Address],\n  ];\n\n  // We don't really care about the names of the arguments, but we need unique one for each one of them\n  const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n\n    let i = 0;\n    const argsList = [];\n    const argsWithTypes = args.reduce((acc, arg) => {\n      const unwrapped = unwrap(arg, (value, type) => {\n        const argName = argLetter[i];\n        i += 1;\n        argsList.push(argName);\n        return `${argName}:${type.label}`;\n      });\n      acc = [...acc, ...unwrapped];\n      return acc;\n    }, []);\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${argsWithTypes}`);\n    code = code.replace(\"##ARGS-LIST##\", argsList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","import { deployContract } from \"../../\";\n\nimport { getEnvironment, replaceImportAddresses, reportMissingImports } from \"flow-cadut\";\n\nexport const CODE = `\n  pub contract FlowManager {\n\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    init(){\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n`;\n\n/**\n * Method to generate Cadence code for FlowManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Deploys FlowManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * param Array<string> - list of signers\n */\nexport const FlowManager = async ({ addressMap = {}, args = [], to, update = false }) => {\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\";\n\n  return deployContract({ code, args, to, update, name });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty. The script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async ({ addressMap = {}, args = [] }) => {\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, checkManager);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getAccountAddress);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\n\n    return vaultRef.balance\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async ({ addressMap = {}, args = [] }) => {\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, getBalance);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getContractAddress);\n\n  return executeScript({ code, args });\n};\n","import { checkManagerTemplate, checkManager } from \"./checkManager\";\nimport { getAccountAddressTemplate, getAccountAddress } from \"./getAccountAddress\";\nimport { getBalanceTemplate, getBalance } from \"./getBalance\";\nimport { getContractAddressTemplate, getContractAddress } from \"./getContractAddress\";\nimport { getManagerAddressTemplate, getManagerAddress } from \"./getManagerAddress\";\n\nexport default {\n  checkManager,\n  checkManagerTemplate,\n  getAccountAddress,\n  getAccountAddressTemplate,\n  getBalance,\n  getBalanceTemplate,\n  getContractAddress,\n  getContractAddressTemplate,\n  getManagerAddress,\n  getManagerAddressTemplate,\n};\n","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [[hexedContract, t.String]];\n\n  await sendTransaction({\n    code,\n    args,\n    service: true,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  try {\n    await executeScript({\n      code,\n      service: true,\n    });\n  } catch (e) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let contractAddress;\n  try {\n    const code = await registry.scripts.getContractAddressTemplate(addressMap);\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    contractAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContractAddress } from \"./contract\";\nimport { defaultsByName } from \"./file\";\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Resolves import addresses defined in code template\n * @param {string} code - Cadence template code.\n * @returns {{string:string}} - name/address map\n */\nexport const resolveImports = async (code) => {\n  const addressMap = {};\n  const importList = extractImports(code);\n  for (const key in importList) {\n    if (defaultsByName[key]) {\n      addressMap[key] = defaultsByName[key];\n    } else {\n      const address = await getContractAddress(key);\n      addressMap[key] = address;\n    }\n  }\n  return addressMap;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"./scripts/\";\nconst TRANSACTION = \"./transactions/\";\nconst CONTRACT = \"./contracts/\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n  return path.resolve(configBase, `${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from \"@onflow/types\";\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [[address, types.Address]];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [\n    [recipient, types.Address],\n    [amount, types.UFix64],\n  ];\n\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n  try {\n    const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    accountAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  if (accountAddress === null) {\n    try {\n      const code = await registry.transactions.createAccountTemplate(addressMap);\n      const publicKey = await pubFlowKey();\n      const args = [\n        [name, publicKey, t.String],\n        [managerAddress, t.Address],\n      ];\n      const { events } = await sendTransaction({\n        code,\n        args,\n      });\n      const event = events.find((event) => event.type.includes(\"AccountAdded\"));\n      accountAddress = event.data.address;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toBe(null);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  wrappedInteraction.then(({ status, errorMessage }) => {\n    expect(status).toBe(4);\n    expect(errorMessage).toBe(\"\");\n  });\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n  await expect(wrappedInteraction).rejects.toThrow();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nclass Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = true;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    this.logging && console[type](message);\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false) {\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.process = spawn(\"flow\", [\"emulator\", \"-v\", \"--http-port\", port, \"--port\", grpc]);\n\n    return new Promise((resolve, reject) => {\n      this.process.stdout.on(\"data\", (data) => {\n        this.log(`LOG: ${data}`);\n        if (data.includes(\"Starting HTTP server\")) {\n          this.log(\"EMULATOR IS UP! Listening for events!\");\n          this.initialized = true;\n          resolve(true);\n        }\n      });\n\n      this.process.stderr.on(\"data\", (data) => {\n        this.log(`ERROR: ${data}`, \"error\");\n        this.initialized = false;\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        this.log(`emulator exited with code ${code}`);\n        this.initialized = false;\n        resolve(true);\n      });\n    });\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(true);\n      }, 50);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","value","flowConfig","config","put","getConfigValue","init","basePath","props","port","pkey","process","sansPrefix","address","replace","withPrefix","ec","EC","signWithKey","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","authorization","addr","keyId","account","serviceAddress","tempId","fcl","signingFunction","data","signature","message","isObject","arg","unwrap","arr","convert","type","slice","map","resolveArguments","args","code","first","Array","isArray","asArgument","reduce","acc","mapArgs","mapValuesToCode","extractParameters","ixType","params","getServiceAddress","addressMap","defaultsByName","deployedContracts","FlowManager","ixCode","replaceImportAddresses","signers","ixSigners","ixArgs","ixService","resolveImports","ixName","name","service","Error","getScriptCode","getTransactionCode","sendTransaction","extractor","serviceAuth","ix","transaction","payer","proposer","limit","auths","push","authorizations","send","response","tx","onceExecuted","executeScript","script","decode","CODE","createAccountTemplate","getEnvironment","envMap","fullMap","reportMissingImports","createAccount","reportMissing","deployContractTemplate","deployContract","initManagerTemplate","initManager","mintTokensTemplate","mintTokens","registerContractTemplate","registerContract","scratchTemplate","scratch","updateContractTemplate","updateContract","txRegistry","hexContract","contract","ixTo","ixAddressMap","ixUpdate","to","deployContractByName","resolvedAddress","getContractCode","contractCode","containerAddress","managerAddress","hexedCode","deployArgs","t","String","Address","i","argsList","argsWithTypes","argName","label","transactions","getManagerAddress","registry","body","recover","result","e","then","hexedContract","getContractAddress","useDefaults","defaultContract","undefined","contractAddress","console","error","_settle","pact","state","_Pact","o","bind","v","observer","REGEXP_IMPORT","prototype","onFulfilled","onRejected","this","callback","_this","getPairs","line","item","filter","collect","extractImports","includes","byName","match","imp","_","Function","target","check","keys","array","reject","_cycle","thenable","_forTo","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","getPath","configBase","resolve","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","getFlowBalance","makeGetBalance","raw","types","mintFlow","recipient","amount","makeMintTransaction","UFix64","getAccountAddress","accountName","Math","random","pow","toFixed","accountAddress","_Buffer","publicKey","getPublic","rlp","encode","pubFlowKey","events","event","find","expect","global","promise","shallPass","wrappedInteraction","resolves","not","toBe","toThrow","status","errorMessage","shallResolve","shallRevert","rejects","shallThrow","spawn","require","constructor","initialized","logging","setLogging","log","start","grpc","Promise","stdout","on","stderr","stop","_this2","kill","setTimeout"],"mappings":"4ZA4BaA,EAAM,CAACC,EAAOC,EAAMC,KAC/B,GAAoB,iBAATD,EAAmB,OAAOF,EAAIC,EAAOC,EAAKE,MAAM,KAAMD,GACjE,IAAKD,EAAKG,OAAQ,OAAOJ,EACzB,IACE,MAAOK,KAASC,GAAQL,EACxB,OAAOF,EAAIC,EAAMK,GAAOC,EAAMJ,GAC9B,MAAOK,GACP,OAAOL,IAWEM,EAAM,CAACC,EAAKC,EAAKC,EAAMT,KAClC,IAAIU,EAAQb,EAAIc,IAAcF,EAAMT,GAC/BU,IACHA,EAAQV,GAEVY,IAASC,IAAIN,EAAKG,IAQPI,WAAwBP,OACnC,uBAAOK,IAASf,IAAIU,IADK,oCC/BdQ,WAAcC,EAAUC,EAAQ,QAC3C,MAAMC,KAAEA,EAAO,MAASD,GAClBE,KAAEA,EAAO,iEAAoEF,EAFjC,OAIlDX,EAAI,cAAec,QAAgB,gCAAiCD,GACpEb,EACE,kBACAc,QACA,oCACA,oBAGFR,IAASC,IAAI,iBAAmB,oBAAmBK,KAEnDZ,EAAI,YAAac,QAAuB,mBAAoBJ,qBAd7C,oCCVJK,EAAcC,GACV,MAAXA,OACGA,EAAQC,QAAQ,MAAO,IAGnBC,EAAcF,GACV,MAAXA,OACG,KAAOD,EAAWC,GCDrBG,EAAK,IAAIC,EAAG,QAQLC,EAAc,CAACC,EAAYC,KACtC,MACMC,EADML,EAAGM,eAAeC,OAAOC,KAAKL,EAAY,QACtCM,KAREL,CAAAA,IAClB,MAAMM,EAAM,IAAIC,EAAK,KAErB,OADAD,EAAIE,OAAOL,OAAOC,KAAKJ,EAAQ,QACxBM,EAAIG,UAKUC,CAAWV,IAE1BW,EAAIV,EAAIU,EAAEC,YAAYT,OAAQ,KAD1B,IAEJU,EAAIZ,EAAIY,EAAED,YAAYT,OAAQ,KAF1B,IAGV,OAAOA,OAAOW,OAAO,CAACH,EAAGE,IAAIE,SAAS,QAG3BC,EACX,CAACC,EAAMC,EAAQ,aACRC,EAAU,+BACcpC,IAASf,IAAI,kCAApCoD,0BACarC,IAASf,IAAI,8BAA1BsB,GAUN,OARA2B,EAAOzB,EAAWyB,GAAQG,GAQnB,IACFD,EACHE,OAAS,GAAEJ,KAAQC,IACnBD,KAAMK,EAAI9B,WAAWyB,GACrBC,MAAAA,EACAK,yBAX6BC,8BAAU,CACvCN,MAAAA,EACAD,KAAMtB,EAAWsB,GACjBQ,UAAW3B,EAAYR,EAAMkC,EAAKE,oDAVtC,oCCxBWC,EAAYC,GAAuB,iBAARA,GAA4B,OAARA,ECQ/CC,EAAS,CAACC,EAAKC,KAC1B,MAAMC,EAAOF,EAAIA,EAAIzD,OAAS,GAC9B,OAAOyD,EAAIG,MAAM,GAAI,GAAGC,IAAKrD,GAAUkD,EAAQlD,EAAOmD,KAalDG,EAAmB,CAACC,EAAMC,KAC9B,GAAoB,IAAhBD,EAAK/D,OACP,MAAO,GAKT,MAAMiE,EAAQF,EAAK,GACnB,OAAIG,MAAMC,QAAQF,IACHA,EAAMA,EAAMjE,OAAS,GACzBoE,WApBIL,CAAAA,GACRA,EAAKM,OAAO,CAACC,EAAKf,IAIjB,IAAIe,KAHQd,EAAOD,EAAK,CAAC/C,EAAOmD,IAC7BV,EAAIM,IAAI/C,EAAOmD,KAIvB,IAcQY,CAAQR,GAIZS,EAAgBR,EAAMD,IAGzBU,EAAqBC,YACXC,wDAsCiBC,oBAAvB7B,GACN,MAAM8B,EAAa,IACdC,MACAC,EACHC,YAAajC,GAKf,OAFAkC,EAASC,GAAuBD,EAAQJ,GAEjC,CACLb,KAAMiB,EACNE,QAASC,EACTrB,KAAMsB,KAnBR,IAAIN,EA/BmB,uBAgCnBO,yBAGwBC,GAAeN,qBAAzCF,MAFAA,EAAoBD,qCAhCtB,IAAIG,EAAQO,EAAQJ,EAAWC,EAAQC,EAEvC,GAAIhC,EAASqB,EAAO,IAAK,CACvB,MAAO5D,GAAS4D,GACVc,KAAEA,EAAFzB,KAAQA,EAARD,KAAcA,EAAdoB,QAAoBA,EAApBO,QAA6BA,GAAU,GAAU3E,EAIvD,GAFAuE,EAAYI,GAEPD,IAASzB,EACZ,MAAM2B,MAAM,8DAEdH,EAASC,EACTR,EAASjB,EAEToB,EAAYD,EACZE,EAAStB,MAEM,WAAXW,GACDc,EAAQH,GAAUV,GAElBa,EAAQJ,EAAWC,GAAUV,EArBX,sBAyBnBa,EAzBmB,wBA0BY,WAAXd,EAAsBkB,GAAgBC,IAC/B,CAAEJ,KAAMD,sBAArCP,yDA3BJ,oCAiEWa,mCACLC,EAAYtB,EAAkB,MADa,uBAEXsB,oCAAhC/B,KAAEA,EAAFD,KAAQA,EAARoB,QAAcA,IAEpB,MAAMa,EAAcrD,IAGdsD,EAAK,CACThD,EAAIiD,YAAYlC,GAChBf,EAAIkD,MAAMH,GACV/C,EAAImD,SAASJ,GACb/C,EAAIoD,MAAM,MAIZ,GAAIlB,EAAS,CACX,MAAMmB,EAAQnB,EAAQtB,IAAKzC,GAAYuB,EAAcvB,IACrD6E,EAAGM,KAAKtD,EAAIuD,eAAeF,SAG3BL,EAAGM,KAAKtD,EAAIuD,eAAe,CAACR,KApBmB,OAwB7CjC,GACFkC,EAAGM,KAAKtD,EAAIc,KAAKD,EAAiBC,EAAMC,qBAEnBf,EAAIwD,KAAKR,kBAA1BS,0BACOzD,EAAI0D,GAAGD,GAAUE,oBA5BJ,oCAqCfC,mCACLd,EAAYtB,EAAkB,UADW,uBAElBsB,oCAAvB/B,KAAEA,EAAFD,KAAQA,IAEd,MAAMkC,EAAK,CAAChD,EAAI6D,OAAO9C,IAJwB,OAM3CD,GACFkC,EAAGM,KAAKtD,EAAIc,KAAKD,EAAiBC,EAAMC,qBAEnBf,EAAIwD,KAAKR,kBAA1BS,GACN,OAAOzD,EAAI8D,OAAOL,OAVM,oCCzJbM,EAAQ,goBAyBRC,WAA+BpC,EAAa,+BAClCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,EAAMI,EAAU,oBAE9BlC,EAAuB8B,EAAMI,KAVJ,oCAmBrBE,YAAuBzC,WAAEA,EAAa,GAAfd,KAAmBA,EAAO,GAA1BoB,QAA8BA,EAAU,gCACvD8B,EAAsBpC,kBAAnCb,GAKN,OAHAuD,EAAc,YAAaxD,EAAK/D,OAAQ,EAAGsH,GAC3CC,EAAc,UAAWpC,EAAQnF,OAAQ,EAAGsH,GAErCxB,EAAgB,CAAE9B,KAAAA,EAAMD,KAAAA,EAAMoB,QAAAA,MANb,oCC5Cb6B,EAAQ,knBA2BRQ,WAAgC3C,EAAa,+BACnCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,EAAMI,EAAU,qBAE9BlC,EAAuB8B,EAAMI,KAVH,oCAmBtBK,YAAwB5C,WAAEA,EAAa,GAAfd,KAAmBA,EAAO,GAA1BoB,QAA8BA,EAAU,gCACxDqC,EAAuB3C,kBAApCb,GAKN,OAHAuD,EAAc,YAAaxD,EAAK/D,OAAQ,EAAGyH,GAC3CF,EAAc,UAAWpC,EAAQnF,OAAQ,EAAGyH,GAErC3B,EAAgB,CAAE9B,KAAAA,EAAMD,KAAAA,EAAMoB,QAAAA,MANZ,oCC9Cd6B,EAAQ,oMAgBRU,WAA6B7C,EAAa,+BAChCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,EAAMI,EAAU,kBAE9BlC,EAAuB8B,EAAMI,KAVN,oCAmBnBO,YAAqB9C,WAAEA,EAAa,GAAfd,KAAmBA,EAAO,GAA1BoB,QAA8BA,EAAU,gCACrDuC,EAAoB7C,kBAAjCb,GAKN,OAHAuD,EAAc,YAAaxD,EAAK/D,OAAQ,EAAG2H,GAC3CJ,EAAc,UAAWpC,EAAQnF,OAAQ,EAAG2H,GAErC7B,EAAgB,CAAE9B,KAAAA,EAAMD,KAAAA,EAAMoB,QAAAA,MANf,oCCnCX6B,EAAQ,85BAmCRY,WAA4B/C,EAAa,+BAC/BqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,EAAMI,EAAU,iBAE9BlC,EAAuB8B,EAAMI,KAVP,oCAmBlBS,YAAoBhD,WAAEA,EAAa,GAAfd,KAAmBA,EAAO,GAA1BoB,QAA8BA,EAAU,gCACpDyC,EAAmB/C,kBAAhCb,GAKN,OAHAuD,EAAc,YAAaxD,EAAK/D,OAAQ,EAAG6H,GAC3CN,EAAc,UAAWpC,EAAQnF,OAAQ,EAAG6H,GAErC/B,EAAgB,CAAE9B,KAAAA,EAAMD,KAAAA,EAAMoB,QAAAA,MANhB,oCCtDV6B,EAAQ,yZAkBRc,WAAkCjD,EAAa,+BACrCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,EAAMI,EAAU,uBAE9BlC,EAAuB8B,EAAMI,KAVD,oCAmBxBW,YAA0BlD,WAAEA,EAAa,GAAfd,KAAmBA,EAAO,GAA1BoB,QAA8BA,EAAU,gCAC1D2C,EAAyBjD,kBAAtCb,GAKN,OAHAuD,EAAc,YAAaxD,EAAK/D,OAAQ,EAAG+H,GAC3CR,EAAc,UAAWpC,EAAQnF,OAAQ,EAAG+H,GAErCjC,EAAgB,CAAE9B,KAAAA,EAAMD,KAAAA,EAAMoB,QAAAA,MANV,oCCrChB6B,EAAQ,2FAYRgB,WAAyBnD,EAAa,+BAC5BqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,EAAMI,EAAU,cAE9BlC,EAAuB8B,EAAMI,KAVV,oCAmBfa,YAAiBpD,WAAEA,EAAa,GAAfd,KAAmBA,EAAO,GAA1BoB,QAA8BA,EAAU,gCACjD6C,EAAgBnD,kBAA7Bb,GAKN,OAHAuD,EAAc,YAAaxD,EAAK/D,OAAQ,EAAGiI,GAC3CV,EAAc,UAAWpC,EAAQnF,OAAQ,EAAGiI,GAErCnC,EAAgB,CAAE9B,KAAAA,EAAMD,KAAAA,EAAMoB,QAAAA,MANnB,oCC/BP6B,EAAQ,qtBA6BRkB,WAAgCrD,EAAa,+BACnCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,EAAMI,EAAU,qBAE9BlC,EAAuB8B,EAAMI,KAVH,oCAmBtBe,YAAwBtD,WAAEA,EAAa,GAAfd,KAAmBA,EAAO,GAA1BoB,QAA8BA,EAAU,gCACxD+C,EAAuBrD,kBAApCb,GAKN,OAHAuD,EAAc,YAAaxD,EAAK/D,OAAQ,EAAGmI,GAC3CZ,EAAc,UAAWpC,EAAQnF,OAAQ,EAAGmI,GAErCrC,EAAgB,CAAE9B,KAAAA,EAAMD,KAAAA,EAAMoB,QAAAA,MANZ,oCCjD3B,MAAe,CACbmC,cAAAA,EACAL,sBAAAA,iBACAQ,yBACAD,cACAG,EACAD,oBAAAA,EACAG,WAAAA,EACAD,mBAAAA,EACAG,iBAAAA,EACAD,yBAAAA,EACAG,QAAAA,EACAD,gBAAAA,EACAG,eAAAA,yBACAD,GCIF,MAAMA,uBAAEA,EAAFV,uBAA0BA,GAA2BY,EAE9CC,EAAeC,GAAaxG,OAAOC,KAAKuG,EAAU,QAAQ5F,SAAS,OAE1E+B,YAA2BE,OAC/B,IAAIa,EAAQ+C,EAAMC,EAAcnD,EAAQoD,EAExC,GAAInF,EAASqB,EAAO,IAAK,CACvB,MAAO5D,GAAS4D,GACVc,KAAEA,EAAFiD,GAAQA,EAAR7D,WAAYA,EAAZd,KAAwBA,EAAxB5B,OAA8BA,GAAWpB,EAE/C,IAAK0E,EACH,MAAME,MAAM,2BAGdH,EAASC,EACT8C,EAAOG,EACPrD,EAAStB,EACTyE,EAAe3D,EACf4D,EAAWtG,OAEVqD,EAAQ+C,EAAMC,EAAcnD,EAAQoD,GAAY9D,EAjBT,uBAoBbC,oBAAvB7B,GACN,MAAM8B,EAAa,IACdC,GACHE,YAAajC,KACVyF,GAGL,MAAO,CACL/C,KAAMD,EACNkD,GAAIH,EACJxE,KAAMsB,EACNlD,OAAQsG,EACR5D,WAAAA,KAhCmB,oCA6CV8D,yCACUlE,4CAAfE,cAGAiE,0BACqBC,GAAgB,CAAEpD,KAAAA,EAAMZ,WAAAA,mBAA7CiE,GAEN,OAAOrB,GAAe,CACpBiB,GAAIE,EACJ5E,KAAM8E,EACNrD,KAAAA,EACA1B,KAAAA,EACA5B,OAAAA,MAVF,MAAMuG,GAAEA,EAAFjD,KAAMA,EAANZ,WAAYA,EAAZd,KAAwBA,EAAxB5B,OAA8BA,GAAS,GAAUwC,EAFD,OAI9B+D,IAAAA,mBAAa9D,gBAJN,oCA2BpB6C,YAAwB1G,kBAI7BgI,0BACuBnE,oBAAvBoE,GACN,MAAMC,EAAYZ,EAAYS,GACxBjE,EAAa,CACjBG,YAAagE,GAR8B,uBAWlC7G,EACD+F,EAAuBrD,GACvB2C,EAAuB3C,kBAF7Bb,GAIJ,IAAIkF,EAAa,CACf,CAACzD,EAAMwD,EAAWE,EAAEC,QACpB,CAACJ,EAAgBG,EAAEE,UAKrB,GAAItF,EAAM,CACRmF,EAAaA,EAAWzG,OAAOsB,GAE/B,IAAIuF,EAAI,EACR,MAAMC,EAAW,GACXC,EAAgBzF,EAAKM,OAAO,CAACC,EAAKf,IAOhC,IAAIe,KANQd,EAAOD,EAAK,CAAC/C,EAAOmD,KACpC,MAAM8F,EARM,6BAQcH,GAG1B,OAFAA,GAAK,EACLC,EAAShD,KAAKkD,GACN,GAAEA,KAAW9F,EAAK+F,WAI3B,IAGH1F,GADAA,EAAOA,EAAK3C,QAAQ,sBAAwB,KAAImI,MACpCnI,QAAQ,gBAAiBkI,QAGrCvF,GADAA,EAAOA,EAAK3C,QAAQ,sBAAwB,KAChCA,QAAQ,gBAAiB,IAKvC,OAAOyE,EAAgB,CACrB9B,KAAAA,EACAD,KAAMmF,EACN/D,QALc,CAAC4D,SA5CjB,MAAML,GAAEA,EAAI1E,KAAM8E,EAAZrD,KAA0BA,EAA1B1B,KAAgCA,EAAhC5B,OAAsCA,GAAWpB,EADV,uBAIpB2H,IAAAA,mBAAa9D,eAJb,oCClGdoC,GAAQ,kmDCKRA,GAAQ,+KCARA,GAAQ,wYCARA,GAAQ,geCARA,GAAQ,2YCHrB,OCCE2C,QC+BW/E,yCACalE,IAASf,IAAI,yBAA9B2B,GADqB,oCAIjBsI,yCACkBhF,oBAAvB7B,GADqC,gCNnBF8B,EAAa,+BACjCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,GAAMI,EAAU,mBAE9BlC,EAAuB8B,GAAMI,KAVL,mCM0BZyC,CAJA,CACjB7E,YAAajC,mBAGTiB,WAigBD,SAAgB8F,EAAMC,GAC5B,IACC,IAAIC,kBAhgBInD,EAAc,CAClB7C,KAAAA,EACA0B,SAAS,wBA+fZ,MAAMuE,GACP,OAAOF,IAER,OAAIC,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,6EAjiBaH,GAAsBnC,qCAAnC1D,mCPiCkCa,EAAa,+BAChCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,GAAMI,EAAU,kBAE9BlC,EAAuB8B,GAAMI,KAVN,mCOhCHyC,kBAArBf,GACN,MAAMqB,EAAgB9B,EAAYS,GAHG,uBAM/BhD,EAAgB,CACpB9B,KAAAA,EACAD,KAJW,CAAC,CAACoG,EAAehB,EAAEC,SAK9B1D,SAAS,4BATW,mCAgCdiC,4DAGR,OAAO/C,OAAAA,SAlBqB,oCCXjBwF,YAA4B3E,EAAM4E,GAAc,OAG3D,GAAIA,EAAa,CACf,MAAMC,EAAkBxF,GAAeW,GACvC,QAAwB8E,IAApBD,EACF,uBAAOA,GAN0D,uBAUxCV,oBAAvBZ,GAEN,MAAMnE,EAAa,CACjBG,YAAagE,GAGf,IAAIwB,EAhBiE,QAmhBhE,SAAgBV,EAAMC,GAC5B,IACC,IAAIC,2BJxhB2CnF,EAAa,+BACvCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,GAAMI,EAAU,yBAE9BlC,EAAuB8B,GAAMI,KAVC,mCIqBhByC,CAA4ChF,kBAAzDb,GADJ,uBAMsB6C,EAAc,CACpC7C,KAAAA,EACAD,KANW,CACX,CAAC0B,EAAM0D,EAAEC,QACT,CAACJ,EAAgBG,EAAEE,UAKnB3D,SAAS,sBAHX8E,QA+fD,MAAMP,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,cAhgBGC,GACPQ,QAAQC,MAAM,iCAAkCT,wCAGlD,OAAOO,IAAAA,IAhCsB,oCCQxB,SAASG,GAAQC,EAAMC,EAAOrK,GACpC,IAAKoK,EAAKpI,EAAG,CACZ,GAAIhC,aAAiBsK,GAAO,CAC3B,IAAItK,EAAMgC,EAOT,YADAhC,EAAMuK,EAAIJ,GAAQK,KAAK,KAAMJ,EAAMC,IALvB,EAARA,IACHA,EAAQrK,EAAMgC,GAEfhC,EAAQA,EAAMyK,EAMhB,GAAIzK,GAASA,EAAM0J,KAElB,YADA1J,EAAM0J,KAAKS,GAAQK,KAAK,KAAMJ,EAAMC,GAAQF,GAAQK,KAAK,KAAMJ,EAAM,IAGtEA,EAAKpI,EAAIqI,EACTD,EAAKK,EAAIzK,EACT,MAAM0K,EAAWN,EAAKG,EAClBG,GACHA,EAASN,IAvCZ,MAAMO,GAAgB,wDApBa,WAClC,cAiCA,OAhCAL,EAAMM,UAAUlB,KAAO,SAASmB,EAAaC,GAC5C,MAAMtB,EAAS,MACTa,EAAQU,KAAK/I,EACnB,GAAIqI,EAAO,CACV,MAAMW,EAAmB,EAARX,EAAYQ,EAAcC,EAC3C,GAAIE,EAAU,CACb,IACCb,GAAQX,EAAQ,EAAGwB,EAASD,KAAKN,IAChC,MAAOhB,GACRU,GAAQX,EAAQ,EAAGC,GAEpB,OAAOD,EAEP,YAiBF,OAdAuB,KAAKR,EAAI,SAASU,GACjB,IACC,MAAMjL,EAAQiL,EAAMR,EACN,EAAVQ,EAAMjJ,EACTmI,GAAQX,EAAQ,EAAGqB,EAAcA,EAAY7K,GAASA,GAC5C8K,EACVX,GAAQX,EAAQ,EAAGsB,EAAW9K,IAE9BmK,GAAQX,EAAQ,EAAGxJ,GAEnB,MAAOyJ,GACRU,GAAQX,EAAQ,EAAGC,KAGdD,KAhC0B,GAsB7B0B,GAAYC,GACTA,EACJ5L,MAAM,MACN8D,IAAK+H,GAASA,EAAKvK,QAAQ,MAAO,KAClCwK,OAAQD,GAASA,EAAK5L,OAAS,GAAc,WAAT4L,GAA8B,SAATA,GAGxDE,GAAU,CAACxH,EAAKsH,KACpB,MAAOtD,EAAUlH,GAAWwK,EAE5B,OADAtH,EAAIgE,GAAYlH,EACTkD,GAQIyH,GAAkB/H,GACxBA,GAAwB,IAAhBA,EAAKhE,OAGXgE,EACJjE,MAAM,MACN8L,OAAQF,GAASA,EAAKK,SAAS,WAC/BnI,IAAI6H,IACJrH,OAAOyH,GAAS,IANV,GAwBE5G,GAAyB,CAAClB,EAAMa,EAAYoH,GAAS,IACzDjI,EAAK3C,QAAQ8J,GAAe,CAACe,EAAOC,EAAK7D,EAAU8D,EAAGhL,KAC3D,MAAMf,EAAM4L,EAAS3D,EAAWlH,EAEhC,MAAQ,GAAE+K,IAAM7D,UADGzD,aAAsBwH,SAAWxH,EAAWxE,GAAOwE,EAAWxE,OAUxEkF,YAAwBvB,OACnC,MAAMa,EAAa,KA+Dd,SAAgByH,EAAQxC,EAAMyC,GACpC,IAAIC,EAAO,GACX,IAAK,IAAInM,KAAOiM,EACfE,EAAKjG,KAAKlG,GAEX,OAnCM,SAAgBoM,EAAO3C,EAAMyC,GACnC,IAAY3B,EAAM8B,EAAdpD,GAAK,EAwBT,OAvBA,SAASqD,EAAO3C,GACf,IACC,OAASV,EAAImD,EAAMzM,QAElB,IADAgK,EAASF,EAAKR,KACAU,EAAOE,KAAM,CAC1B,MAxD0B0C,EAwDP5C,aAvDIc,IAAsB,EAAb8B,EAASpK,GA2DxC,YADAwH,EAAOE,KAAKyC,EAAQD,IAAWA,EAAS/B,GAAQK,KAAK,KAAMJ,EAAO,IAAIE,GAAS,KAF/Ed,EAASA,EAAOiB,EAOfL,EACHD,GAAQC,EAAM,EAAGZ,GAEjBY,EAAOZ,EAEP,MAAOC,GACRU,GAAQC,IAASA,EAAO,IAAIE,IAAU,EAAGb,GAtErC,IAAwB2C,EAyE9BD,GACO/B,EAUAiC,CAAOL,EAAM,SAASlD,GAAK,gBAlEtBjJ,0BACLyE,GAAezE,0BAGK+J,GAAmB/J,kBAAnCe,GACNyD,EAAWxE,GAAOe,IAHlByD,EAAWxE,GAAOyE,GAAezE,+CAgEGyJ,CAAK0C,EAAKlD,OAnE/ByC,GAAe/H,uDASlC,OAAOa,IAAAA,GAXkB,oCChDdC,GAAiB,CAC5BgI,UAAW,qBACXC,cAAe,qBACfC,SAAU,qBACVC,gBAAiB,sBAONC,GAAoB,CAC/B,qBAAsB,qBACtB,qBAAsB,qBACtB,qBAAsB,qBACtB,qBAAsB,sBAaXC,YAAiB1H,EAAM9B,EAThB,8CAUOjD,IAASf,IAAI,4BAAhCyN,GACN,OAAOvN,EAAKwN,QAAQD,EAAa,GAAEzJ,KAAQ8B,WAFzB,oCAYP6H,GAAc,CAACC,EAAM1I,EAAa,GAAI2I,GAAY,KAC7D,MAAMC,EAjDiB5N,CAAAA,GAChB6N,EAAGC,aAAa9N,EAAM,QAgDb+N,CAASL,GAIzB,OAAO1I,EACHK,GAAuBuI,EAAS,IAHnBD,EAAYN,GAAoBpI,MAKxCD,IAEL4I,GASO5E,aAAyBpD,KAAEA,EAAFZ,WAAQA,+BACzBsI,GAAQ1H,EAxCZ,+BAwCT5F,GACN,OAAOyN,GAAYzN,EAAMgF,KAFC,oCAWfgB,aAA4BJ,KAAEA,EAAFZ,WAAQA,+BAC5BsI,GAAQ1H,EApDT,kCAoDZ5F,GACN,OAAOyN,GAAYzN,EAAMgF,KAFI,oCAWlBe,aAAuBH,KAAEA,EAAFZ,WAAQA,+BACvBsI,GAAQ1H,EAhEd,6BAgEP5F,GACN,OAAOyN,GAAYzN,EAAMgF,KAFD,oCC5FpBgJ,GAAe,CAAEC,aAAchJ,GAAegI,WAE9CiB,GAActI,GACXA,EAAK,GAAGuI,cAAgBvI,EAAK7B,MAAM,GCK/BqK,YAAwB7M,uCDOAqE,uCRRIZ,EAAa,+BAC/BqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,GAAMI,EAAU,iBAE9BlC,EAAuB8B,GAAMI,KAVP,mCQSVyC,CAAoCgE,mBAAjD7J,GAGN,OAAOA,EAAK3C,QAFI,mBAEc6K,GACX,iBAAVA,EAA2BzG,EAAOsI,GAAWtI,MAL7B,mCCNPyI,CAAe,4BAA3BC,GACN,MAAMnK,EAAOkB,GAAuBiJ,EAAKrJ,IAGzC,OAAO+B,EAAc,CAAE7C,KAAAA,EAAMD,KAFhB,CAAC,CAAC3C,EAASgN,EAAM/E,cAHL,oCAedgF,YAAkBC,EAAWC,uCDjBA9I,8BACrBoE,GAAsBjC,mBAAmBiG,mBAAtD7J,GAGN,OAAOA,EAAK3C,QAFI,mBAEc6K,GACX,iBAAVA,EAA2BzG,EAAOsI,GAAWtI,MALxB,mCCkBZ+I,CAAoB,4BAAhCL,GACN,MAAMnK,EAAOkB,GAAuBiJ,EAAKrJ,IAMzC,OAAOgB,EAAgB,CAAE9B,KAAAA,EAAMD,KALlB,CACX,CAACuK,EAAWF,EAAM/E,SAClB,CAACkF,EAAQH,EAAMK,aALE,oCCsgBd,YAAgB3E,EAAMC,GAC5B,IACC,IAAIC,EAASF,IACZ,MAAMG,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,EA3hBK0E,MAAAA,YAA2BC,OACtC,MAAMlJ,EAAOkJ,GAAgB,uBAAsBC,KAAKC,SAAWD,KAAKE,IAAI,GAAI,IAAIC,QAAQ,KADtC,uBAGzBnF,oBAAvBZ,sCAuBiB,OAAnBgG,gDAEmBnF,GAAsB5C,sBAAsBpC,kBAAzDb,iDzBKGzC,EAAGM,iBAAeC,SAAAmN,EAAOlN,4BAAWrB,IAASf,IAAI,iCAA9D,MACMuP,SADO3N,aAAiE,QACvD4N,UAAU,OAAO9N,QAAQ,MAAO,IACvD,OAAO+N,EACJC,OAAO,CACNvN,OAAOC,KAAKmN,EAAW,OACvB,EACA,EACA,MAEDxM,SAAS,SAVS,mCyBHO4M,kBAAlBJ,GAFJ,uBAOuBpJ,EAAgB,CACvC9B,KAAAA,EACAD,KANW,CACX,CAAC0B,EAAMyJ,EAAW/F,EAAEC,QACpB,CAACJ,EAAgBG,EAAEE,4BAEfkG,OAAEA,IAIR,MAAMC,EAAQD,EAAOE,KAAMD,GAAUA,EAAM7L,KAAKqI,SAAS,iBACzDgD,EAAiBQ,EAAMrM,KAAK/B,wBACrB6I,GACPQ,QAAQC,MAAMT,qFAIlB,OAAO+E,IAAAA,EAxCP,MAAMnK,EAAa,CACjBG,YAAagE,GAGf,IAAIgG,EATkD,sDXJRnK,EAAa,+BACtCqC,mBAAfC,GACN,MAAMC,EAAU,IACXD,KACAtC,GAML,OAFAwC,EAAqBL,GAAMI,EAAU,wBAE9BlC,EAAuB8B,GAAMI,KAVA,mCWefyC,CAA2ChF,kBAAxDb,GADJ,uBAOqB6C,EAAc,CACnC7C,KAAAA,EACAD,KANW,CACX,CAAC0B,EAAM0D,EAAEC,QACT,CAACJ,EAAgBG,EAAEE,UAKnB3D,SAAS,sBAHXsJ,kBAKO/E,GACPQ,QAAQC,MAAM,iCAAkCT,sCAvBtB,qCCdxByF,OAAEA,IAAWC,OAONC,YAAiB3J,sDAIfA,yBAHK,mBAAPA,6BACIA,yDAFG,oCAYP4J,YAAmB5J,OAC9B,MAAM6J,EAAqBF,GAAQ3J,GADE,uBAE/ByJ,GAAOI,GAAoBC,SAASC,IAAIC,KAAK,8CAC7CP,GAAOI,GAAoBC,SAASC,IAAIE,2BAO9C,OALAJ,EAAmB5F,KAAK,EAAGiG,OAAAA,EAAQC,aAAAA,MACjCV,GAAOS,GAAQF,KAAK,GACpBP,GAAOU,GAAcH,KAAK,MAGrBH,MAVa,oCAkBTO,YAAsBpK,OACjC,MAAM6J,EAAqBF,GAAQ3J,GADK,uBAElCyJ,GAAOI,GAAoBC,SAASC,IAAIE,2BAE9C,OAAOJ,IAJgB,oCAYZQ,YAAqBrK,OAChC,MAAM6J,EAAqBF,GAAQ3J,GADI,uBAEjCyJ,GAAOI,GAAoBS,QAAQP,IAAIC,KAAK,0BAF5B,oCAUXO,YAAoBvK,OAC/B,MAAM6J,EAAqBF,GAAQ3J,GADG,uBAEhCyJ,GAAOI,GAAoBS,QAAQP,IAAIC,KAAK,8CAC5CP,GAAOI,GAAoBS,QAAQL,gCAHpB,qCC3DjBO,MAAEA,IAAUC,QAAQ,iBAsF1B,WAhFA,MAIEC,cACEpF,KAAKqF,aAAc,EACnBrF,KAAKsF,SAAU,EAOjBC,WAAWD,GACTtF,KAAKsF,QAAUA,EAQjBE,IAAI1N,EAASM,EAAO,OAClB4H,KAAKsF,SAAWpG,QAAQ9G,GAAMN,GAS1B2N,MAAMhQ,EApCY,KAoCc6P,GAAU,eAI9CtF,KAFA,IAAI0F,EADWjQ,EArCO,KACA,KA0CtB,OAHAyK,EAAKoF,QAAUA,EACfpF,EAAKvK,QAAUuP,GAAM,OAAQ,CAAC,WAAY,KAAM,cAAezP,EAAM,SAAUiQ,oBAExE,IAAIC,QAAQ,CAAC7D,EAASX,KAC3BjB,EAAKvK,QAAQiQ,OAAOC,GAAG,OAASjO,IAC9BsI,EAAKsF,IAAK,QAAO5N,KACbA,EAAK6I,SAAS,0BAChBP,EAAKsF,IAAI,yCACTtF,EAAKmF,aAAc,EACnBvD,GAAQ,MAIZ5B,EAAKvK,QAAQmQ,OAAOD,GAAG,OAASjO,IAC9BsI,EAAKsF,IAAK,UAAS5N,IAAQ,SAC3BsI,EAAKmF,aAAc,EACnBlE,MAGFjB,EAAKvK,QAAQkQ,GAAG,QAAUpN,IACxByH,EAAKsF,IAAK,6BAA4B/M,KACtCyH,EAAKmF,aAAc,EACnBvD,GAAQ,QA1BH,mCAmCLiE,mBAGF/F,KADF,uBAAO,IAAI2F,QAAS7D,IAClBkE,EAAKrQ,QAAQsQ,OACbC,WAAW,KACTF,EAAKX,aAAc,EACnBvD,GAAQ,IACP,OAPG"}