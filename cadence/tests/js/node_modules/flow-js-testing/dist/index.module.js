import{flowConfig as e}from"@onflow/fcl-config";import{config as n}from"@onflow/config";import r from"fs";import t from"path";import*as o from"@onflow/types";import*as c from"@onflow/fcl";import{mapValuesToCode as a,getEnvironment as s,reportMissingImports as i,replaceImportAddresses as u,reportMissing as l}from"flow-cadut";import{ec as m}from"elliptic";import{SHA3 as d}from"sha3";import*as f from"rlp";const g=(e,n,r)=>{if("string"==typeof n)return g(e,n.split("/"),r);if(!n.length)return e;try{const[t,...o]=n;return g(e[t],o,r)}catch(e){return r}},h=(r,t,o,c)=>{let a=g(e(),o,c);a||(a=c),n().put(r,a)},p=function(e){try{return Promise.resolve(n().get(e))}catch(e){return Promise.reject(e)}},P=function(e,r={}){try{const{port:t=8080}=r,{pkey:o="48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902"}=r;return h("PRIVATE_KEY",process,"accounts/emulator-account/key",o),h("SERVICE_ADDRESS",process,"accounts/emulator-account/address","f8d6e0586b0a20c7"),n().put("accessNode.api",`http://localhost:${t}`),h("BASE_PATH",process,"resolve/basePath",e),Promise.resolve()}catch(e){return Promise.reject(e)}},v=e=>null==e?null:e.replace(/^0x/,""),M=e=>null==e?null:"0x"+v(e),A=new m("p256"),y=(e,n)=>{const r=A.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const n=new d(256);return n.update(Buffer.from(e,"hex")),n.digest()})(n)),t=r.r.toArrayLike(Buffer,"be",32),o=r.s.toArrayLike(Buffer,"be",32);return Buffer.concat([t,o]).toString("hex")},b=(e,r=0)=>function(t={}){try{return Promise.resolve(n().get("SERVICE_ADDRESS")).then(function(o){return Promise.resolve(n().get("PRIVATE_KEY")).then(function(n){return e=v(e||o),{...t,tempId:`${e}-${r}`,addr:c.sansPrefix(e),keyId:r,signingFunction:function(t){try{return Promise.resolve({keyId:r,addr:M(e),signature:y(n,t.message)})}catch(e){return Promise.reject(e)}}}})})}catch(e){return Promise.reject(e)}},w=e=>"object"==typeof e&&null!==e,S=(e,n)=>{const r=e[e.length-1];return e.slice(0,-1).map(e=>n(e,r))},T=(e,n)=>{if(0===e.length)return[];const r=e[0];return Array.isArray(r)&&r[r.length-1].asArgument?(e=>e.reduce((e,n)=>[...e,...S(n,(e,n)=>c.arg(e,n))],[]))(e):a(n,e)},x=e=>function(n){try{function r(){function e(){return Promise.resolve(ue()).then(function(e){const r={...Ae,...n,FlowManager:e};return t=ve(t,r),{code:t,signers:c,args:a}})}let n;const r=function(){if(!s)return Promise.resolve(Me(t)).then(function(e){n=e});n=Ae}();return r&&r.then?r.then(e):e()}let t,o,c,a,s;if(w(n[0])){const[e]=n,{name:r,code:i,args:u,signers:l,service:m=!1}=e;if(s=m,!r&&!i)throw Error("Both `name` and `code` are missing. Provide either of them");o=r,t=i,c=l,a=u}else"script"===e?[o,a]=n:[o,c,a]=n;const i=function(){if(o)return Promise.resolve(("script"===e?xe:Te)({name:o})).then(function(e){t=e})}();return Promise.resolve(i&&i.then?i.then(r):r())}catch(e){return Promise.reject(e)}},k=function(){try{const e=arguments,n=x("tx");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n,signers:r}){const t=b(),o=[c.transaction(e),c.payer(t),c.proposer(t),c.limit(999)];if(r){const e=r.map(e=>b(e));o.push(c.authorizations(e))}else o.push(c.authorizations([t]));return n&&o.push(c.args(T(n,e))),Promise.resolve(c.send(o)).then(function(e){return Promise.resolve(c.tx(e).onceExecuted())})})}catch(e){return Promise.reject(e)}},j=function(){try{const e=arguments,n=x("script");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n}){const r=[c.script(e)];return n&&r.push(c.args(T(n,e))),Promise.resolve(c.send(r)).then(function(e){return c.decode(e)})})}catch(e){return Promise.reject(e)}},F="\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n \n",E=function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(F,r,"createAccount =>"),u(F,r)})}catch(e){return Promise.reject(e)}},R=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(E(e)).then(function(e){return l("arguments",n.length,3,R),l("signers",r.length,1,R),k({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},C="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n",B=function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(C,r,"deployContract =>"),u(C,r)})}catch(e){return Promise.reject(e)}},I=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(B(e)).then(function(e){return l("arguments",n.length,3,I),l("signers",r.length,1,I),k({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},D='\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: "FlowManager",\n           code: code.decodeHex(),\n        )\n   }\n}\n\n',$=function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(D,r,"initManager =>"),u(D,r)})}catch(e){return Promise.reject(e)}},_=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve($(e)).then(function(e){return l("arguments",n.length,1,_),l("signers",r.length,1,_),k({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},L='\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic("Signer is not the token admin")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic("Unable to borrow receiver reference")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n',H=function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(L,r,"mintTokens =>"),u(L,r)})}catch(e){return Promise.reject(e)}},G=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(H(e)).then(function(e){return l("arguments",n.length,2,G),l("signers",r.length,1,G),k({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},K="\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n",V=function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(K,r,"registerContract =>"),u(K,r)})}catch(e){return Promise.reject(e)}},z=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(V(e)).then(function(e){return l("arguments",n.length,2,z),l("signers",r.length,1,z),k({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},N="\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n",U=function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(N,r,"scratch =>"),u(N,r)})}catch(e){return Promise.reject(e)}},O=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(U(e)).then(function(e){return l("arguments",n.length,0,O),l("signers",r.length,1,O),k({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}},Y="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",W=function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(Y,r,"updateContract =>"),u(Y,r)})}catch(e){return Promise.reject(e)}},q=function({addressMap:e={},args:n=[],signers:r=[]}){try{return Promise.resolve(W(e)).then(function(e){return l("arguments",n.length,3,q),l("signers",r.length,1,q),k({code:e,args:n,signers:r})})}catch(e){return Promise.reject(e)}};var J={createAccount:R,createAccountTemplate:E,deployContract:I,deployContractTemplate:B,initManager:_,initManagerTemplate:$,mintTokens:G,mintTokensTemplate:H,registerContract:z,registerContractTemplate:V,scratch:O,scratchTemplate:U,updateContract:q,updateContractTemplate:W};const{updateContractTemplate:Q,deployContractTemplate:X}=J,Z=e=>Buffer.from(e,"utf8").toString("hex"),ee=function(e){try{let n,r,t,o,c;if(w(e[0])){const[a]=e,{name:s,to:i,addressMap:u,args:l,update:m}=a;if(!s)throw Error("'name' field is missing");n=s,r=i,o=l,t=u,c=m}else[n,r,t,o,c]=e;return Promise.resolve(ue()).then(function(e){const a={...Ae,FlowManager:e,...t};return{name:n,to:r,args:o,update:c,addressMap:a}})}catch(e){return Promise.reject(e)}},ne=function(){try{return Promise.resolve(ee([].slice.call(arguments))).then(function(e){function n(e){return Promise.resolve(Se({name:t,addressMap:o})).then(function(n){return re({to:e,code:n,name:t,args:c,update:a})})}const{to:r,name:t,addressMap:o,args:c,update:a=!1}=e;return r?n(r):Promise.resolve(ue()).then(n)})}catch(e){return Promise.reject(e)}},re=function(e){try{function n(e){return Promise.resolve(ue()).then(function(n){const r=Z(t),i={FlowManager:n};return Promise.resolve(s?Q(i):X(i)).then(function(t){let s=[[c,r,o.String],[n,o.Address]];if(a){s=s.concat(a);let e=0;const n=[],r=a.reduce((r,t)=>[...r,...S(t,(r,t)=>{const o="abcdefghijklmnopqrstuvwxyz"[e];return e+=1,n.push(o),`${o}:${t.label}`})],[]);t=(t=t.replace("##ARGS-WITH-TYPES##",`, ${r}`)).replace("##ARGS-LIST##",n)}else t=(t=t.replace("##ARGS-WITH-TYPES##","")).replace("##ARGS-LIST##","");return k({code:t,args:s,signers:[e]})})})}const{to:r,code:t,name:c,args:a,update:s}=e;return Promise.resolve(r?n(r):Promise.resolve(ue()).then(n))}catch(e){return Promise.reject(e)}},te="\n  pub contract FlowManager {\n\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    init(){\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n",oe="\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty. The script will throw error if FlowManager is not\n    // added to service address\n}\n\n",ce="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n",ae='\n  // This script reads the balance field of an account\'s FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic("Could not borrow Balance reference to the Vault")\n\n    return vaultRef.balance\n}\n',se="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n";var ie=J;const ue=function(){try{return Promise.resolve(n().get("SERVICE_ADDRESS")).then(M)}catch(e){return Promise.reject(e)}},le=function(){try{return Promise.resolve(ue()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(oe,r,"checkManager =>"),u(oe,r)})}catch(e){return Promise.reject(e)}}({FlowManager:e})).then(function(e){const n=function(n,r){try{var t=Promise.resolve(j({code:e,service:!0})).then(function(){})}catch(e){return r()}return t&&t.then?t.then(void 0,r):t}(0,function(){return Promise.resolve(function(){try{return Promise.resolve(ie.initManagerTemplate()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(te,r,"FlowManager =>"),u(te,r)})}catch(e){return Promise.reject(e)}}()).then(function(n){const r=Z(n);return Promise.resolve(k({code:e,args:[[r,o.String]],service:!0})).then(function(){})})})}catch(e){return Promise.reject(e)}}()).then(function(){})});return n&&n.then?n.then(function(){return ue()}):ue()})})}catch(e){return Promise.reject(e)}},me=function(e,n=!1){try{if(n){const n=Ae[e];if(void 0!==n)return Promise.resolve(n)}return Promise.resolve(le()).then(function(n){const r={FlowManager:n};let t;const c=function(c,a){try{var l=Promise.resolve(function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(se,r,"getContractAddress =>"),u(se,r)})}catch(e){return Promise.reject(e)}}(r)).then(function(r){return Promise.resolve(j({code:r,args:[[e,o.String],[n,o.Address]],service:!0})).then(function(e){t=e})})}catch(e){return a(e)}return l&&l.then?l.then(void 0,a):l}(0,function(e){console.error("failed to get account address:",e)});return c&&c.then?c.then(function(){return t}):t})}catch(e){return Promise.reject(e)}};function de(e,n,r){if(!e.s){if(r instanceof ge){if(!r.s)return void(r.o=de.bind(null,e,n));1&n&&(n=r.s),r=r.v}if(r&&r.then)return void r.then(de.bind(null,e,n),de.bind(null,e,2));e.s=n,e.v=r;const t=e.o;t&&t(e)}}const fe=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,ge=function(){function e(){}return e.prototype.then=function(n,r){const t=new e,o=this.s;if(o){const e=1&o?n:r;if(e){try{de(t,1,e(this.v))}catch(e){de(t,2,e)}return t}return this}return this.o=function(e){try{const o=e.v;1&e.s?de(t,1,n?n(o):o):r?de(t,1,r(o)):de(t,2,o)}catch(e){de(t,2,e)}},t},e}(),he=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),pe=(e,n)=>{const[r,t]=n;return e[r]=t,e},Pe=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(he).reduce(pe,{}):{},ve=(e,n,r=!0)=>e.replace(fe,(e,t,o,c,a)=>{const s=r?o:a;return`${t}${o} from ${n instanceof Function?n(s):n[s]}`}),Me=function(e){try{const n={},r=function(e,r,t){var o=[];for(var c in e)o.push(c);return function(e,n,r){var t,o,c=-1;return function r(a){try{for(;++c<e.length;)if((a=n(c))&&a.then){if(!((s=a)instanceof ge&&1&s.s))return void a.then(r,o||(o=de.bind(null,t=new ge,2)));a=a.v}t?de(t,1,a):t=a}catch(e){de(t||(t=new ge),2,e)}var s}(),t}(o,function(e){return function(e){const r=function(){if(!Ae[e])return Promise.resolve(me(e)).then(function(r){n[e]=r});n[e]=Ae[e]}();if(r&&r.then)return r.then(function(){})}(o[e])})}(Pe(e));return Promise.resolve(r&&r.then?r.then(function(){return n}):n)}catch(e){return Promise.reject(e)}},Ae={FlowToken:"0x0ae53cb6e3f42a79",FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7"},ye={"0xe5a8b7f23e8b548f":"0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7":"0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79":"0x0ae53cb6e3f42a79","0xee82856bf20e2aa6":"0xee82856bf20e2aa6"},be=function(e,r="./transactions/"){try{return Promise.resolve(n().get("BASE_PATH")).then(function(n){return t.resolve(n,`${r}/${e}.cdc`)})}catch(e){return Promise.reject(e)}},we=(e,n={},t=!1)=>{const o=(e=>r.readFileSync(e,"utf8"))(e);return n?ve(o,{...t?ye:Ae,...n}):o},Se=function({name:e,addressMap:n}){try{return Promise.resolve(be(e,"./contracts/")).then(function(e){return we(e,n)})}catch(e){return Promise.reject(e)}},Te=function({name:e,addressMap:n}){try{return Promise.resolve(be(e,"./transactions/")).then(function(e){return we(e,n)})}catch(e){return Promise.reject(e)}},xe=function({name:e,addressMap:n}){try{return Promise.resolve(be(e,"./scripts/")).then(function(e){return we(e,n)})}catch(e){return Promise.reject(e)}},ke={ExampleToken:Ae.FlowToken},je=e=>e[0].toLowerCase()+e.slice(1),Fe=function(e){try{return Promise.resolve(function(e){try{return Promise.resolve(function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(ae,r,"getBalance =>"),u(ae,r)})}catch(e){return Promise.reject(e)}}(ke)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:je(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(n){const r=ve(n,Ae);return j({code:r,args:[[e,o.Address]]})})}catch(e){return Promise.reject(e)}},Ee=function(e,n){try{return Promise.resolve(function(e){try{return Promise.resolve(ie.mintTokensTemplate(ke)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:je(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(r){const t=ve(r,Ae);return k({code:t,args:[[e,o.Address],[n,o.UFix64]]})})}catch(e){return Promise.reject(e)}};function Re(e,n){try{var r=e()}catch(e){return n(e)}return r&&r.then?r.then(void 0,n):r}const Ce=function(e){try{const r=e||`deployment-account-${(Math.random()*Math.pow(10,8)).toFixed(0)}`;return Promise.resolve(le()).then(function(e){function t(){const t=function(){if(null===a){const t=Re(function(){return Promise.resolve(ie.createAccountTemplate(c)).then(function(t){return Promise.resolve(function(){try{const e=A.keyFromPrivate,r=Buffer,t=r.from;return Promise.resolve(n().get("PRIVATE_KEY")).then(function(n){const o=e.call(A,t.call(r,n,"hex")).getPublic("hex").replace(/^04/,"");return f.encode([Buffer.from(o,"hex"),2,3,1e3]).toString("hex")})}catch(e){return Promise.reject(e)}}()).then(function(n){return Promise.resolve(k({code:t,args:[[r,n,o.String],[e,o.Address]]})).then(function({events:e}){const n=e.find(e=>e.type.includes("AccountAdded"));a=n.data.address})})})},function(e){console.error(e)});if(t&&t.then)return t.then(function(){})}}();return t&&t.then?t.then(function(){return a}):a}const c={FlowManager:e};let a;const l=Re(function(){return Promise.resolve(function(e={}){try{return Promise.resolve(s()).then(function(n){const r={...n,...e};return i(ce,r,"getAccountAddress =>"),u(ce,r)})}catch(e){return Promise.reject(e)}}(c)).then(function(n){return Promise.resolve(j({code:n,args:[[r,o.String],[e,o.Address]],service:!0})).then(function(e){a=e})})},function(e){console.error("failed to get account address:",e)});return l&&l.then?l.then(t):t()})}catch(e){return Promise.reject(e)}},{expect:Be}=global,Ie=function(e){try{let r;function n(n){return r?n:Promise.resolve(e)}const t=function(){if("function"==typeof e)return r=1,Promise.resolve(e())}();return Promise.resolve(t&&t.then?t.then(n):n(t))}catch(e){return Promise.reject(e)}},De=function(e){try{const n=Ie(e);return Promise.resolve(Be(n).resolves.not.toBe(null)).then(function(){return Promise.resolve(Be(n).resolves.not.toThrow()).then(function(){return n.then(({status:e,errorMessage:n})=>{Be(e).toBe(4),Be(n).toBe("")}),n})})}catch(e){return Promise.reject(e)}},$e=function(e){try{const n=Ie(e);return Promise.resolve(Be(n).resolves.not.toThrow()).then(function(){return n})}catch(e){return Promise.reject(e)}},_e=function(e){try{const n=Ie(e);return Promise.resolve(Be(n).rejects.not.toBe(null)).then(function(){})}catch(e){return Promise.reject(e)}},Le=function(e){try{const n=Ie(e);return Promise.resolve(Be(n).rejects.not.toBe(null)).then(function(){return Promise.resolve(Be(n).rejects.toThrow()).then(function(){})})}catch(e){return Promise.reject(e)}},{spawn:He}=require("child_process");var Ge=new class{constructor(){this.initialized=!1,this.logging=!0}setLogging(e){this.logging=e}log(e,n="log"){this.logging&&console[n](e)}start(e=8080,n=!1){try{const r=this;let t=e-8080+3569;return r.logging=n,r.process=He("flow",["emulator","-v","--http-port",e,"--port",t]),Promise.resolve(new Promise((e,n)=>{r.process.stdout.on("data",n=>{r.log(`LOG: ${n}`),n.includes("Starting HTTP server")&&(r.log("EMULATOR IS UP! Listening for events!"),r.initialized=!0,e(!0))}),r.process.stderr.on("data",e=>{r.log(`ERROR: ${e}`,"error"),r.initialized=!1,n()}),r.process.on("close",n=>{r.log(`emulator exited with code ${n}`),r.initialized=!1,e(!0)})}))}catch(e){return Promise.reject(e)}}stop(){try{const e=this;return Promise.resolve(new Promise(n=>{e.process.kill(),setTimeout(()=>{e.initialized=!1,n(!0)},50)}))}catch(e){return Promise.reject(e)}}};export{re as deployContract,ne as deployContractByName,Ge as emulator,j as executeScript,Pe as extractImports,Ce as getAccountAddress,p as getConfigValue,me as getContractAddress,Se as getContractCode,Fe as getFlowBalance,xe as getScriptCode,ue as getServiceAddress,we as getTemplate,Te as getTransactionCode,P as init,Ee as mintFlow,Ie as promise,ve as replaceImportAddresses,Me as resolveImports,k as sendTransaction,h as set,De as shallPass,$e as shallResolve,_e as shallRevert,Le as shallThrow};
//# sourceMappingURL=index.module.js.map
