{"version":3,"file":"index.modern.js","sources":["../src/config.js","../src/init.js","../src/address.js","../src/crypto.js","../src/utils.js","../src/interaction.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/deploy-code.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getContractAddress.js","../src/generated/scripts/index.js","../src/generated/index.js","../src/manager.js","../src/contract.js","../src/imports.js","../src/file.js","../src/templates.js","../src/flow-token.js","../src/account.js","../src/jest-asserts.js","../src/emulator.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  let value = get(flowConfig(), conf, fallback);\n  if (!value) {\n    value = fallback;\n  }\n  config().put(key, value);\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} [props.port] - port to use for accessAPI\n * @param {number} [props.pkey] - private key to use for service account in case of collisions\n */\nexport const init = async (basePath, props = {}) => {\n  const { port = 8080 } = props;\n  const { pkey = \"48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902\" } = props;\n\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/key\", pkey);\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"resolve/basePath\", basePath);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isObject = (arg) => typeof arg === \"object\" && arg !== null;\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { mapValuesToCode } from \"flow-cadut\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode, defaultsByName } from \"./file\";\nimport { resolveImports, replaceImportAddresses } from \"./imports\";\nimport { getServiceAddress } from \"./manager\";\nimport { isObject } from \"./utils\";\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst mapArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nconst resolveArguments = (args, code) => {\n  if (args.length === 0) {\n    return [];\n  }\n\n  // We can check first element in array. If it's last value is instance\n  // of @onflow/types then we assume that the rest of them are also unprocessed\n  const first = args[0];\n  if (Array.isArray(first)) {\n    const last = first[first.length - 1];\n    if (last.asArgument) {\n      return mapArgs(args);\n    }\n  }\n  // Otherwise we process them and try to match them against the code\n  return mapValuesToCode(code, args);\n};\n\nconst extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixService;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, code, args, signers, service = false } = props;\n\n      ixService = service;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      ixName = name;\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n    } else {\n      if (ixType === \"script\") {\n        [ixName, ixArgs] = params;\n      } else {\n        [ixName, ixSigners, ixArgs] = params;\n      }\n    }\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({ name: ixName });\n    }\n\n    // We need a way around to allow initial scripts and transactions for Manager contract\n    let deployedContracts;\n    if (ixService) {\n      deployedContracts = defaultsByName;\n    } else {\n      deployedContracts = await resolveImports(ixCode);\n    }\n\n    const serviceAddress = await getServiceAddress();\n    const addressMap = {\n      ...defaultsByName,\n      ...deployedContracts,\n      FlowManager: serviceAddress,\n    };\n\n    ixCode = replaceImportAddresses(ixCode, addressMap);\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\nexport const sendTransaction = async (...props) => {\n  const extractor = extractParameters(\"tx\");\n  const { code, args, signers } = await extractor(props);\n\n  const serviceAuth = authorization();\n\n  // set repeating transaction code\n  const ix = [\n    fcl.transaction(code),\n    fcl.payer(serviceAuth),\n    fcl.proposer(serviceAuth),\n    fcl.limit(999),\n  ];\n\n  // use signers if specified\n  if (signers) {\n    const auths = signers.map((address) => authorization(address));\n    ix.push(fcl.authorizations(auths));\n  } else {\n    // and only service account if no signers\n    ix.push(fcl.authorizations([serviceAuth]));\n  }\n\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return await fcl.tx(response).onceExecuted();\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\nexport const executeScript = async (...props) => {\n  const extractor = extractParameters(\"script\");\n  const { code, args } = await extractor(props);\n\n  const ix = [fcl.script(code)];\n  // add arguments if any\n  if (args) {\n    ix.push(fcl.args(resolveArguments(args, code)));\n  }\n  const response = await fcl.send(ix);\n  return fcl.decode(response);\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n \n`;\n\n/**\n * Method to generate cadence code for createAccount transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends createAccount transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const createAccount = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, createAccount);\n  reportMissing(\"signers\", signers.length, 1, createAccount);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for deployContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends deployContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const deployContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, deployContract);\n  reportMissing(\"signers\", signers.length, 1, deployContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n}\n\n`;\n\n/**\n * Method to generate cadence code for initManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends initManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const initManager = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, initManager);\n  reportMissing(\"signers\", signers.length, 1, initManager);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for mintTokens transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends mintTokens transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const mintTokens = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, mintTokens);\n  reportMissing(\"signers\", signers.length, 1, mintTokens);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for registerContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends registerContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const registerContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, registerContract);\n  reportMissing(\"signers\", signers.length, 1, registerContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n`;\n\n/**\n * Method to generate cadence code for scratch transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends scratch transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const scratch = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, scratch);\n  reportMissing(\"signers\", signers.length, 1, scratch);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { sendTransaction } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n * Method to generate cadence code for updateContract transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Sends updateContract transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * @param Array<string> - list of signers\n */\nexport const updateContract = async ({ addressMap = {}, args = [], signers = [] }) => {\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, updateContract);\n  reportMissing(\"signers\", signers.length, 1, updateContract);\n\n  return sendTransaction({ code, args, signers });\n};\n","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccount,\n  createAccountTemplate,\n  deployContract,\n  deployContractTemplate,\n  initManager,\n  initManagerTemplate,\n  mintTokens,\n  mintTokensTemplate,\n  registerContract,\n  registerContractTemplate,\n  scratch,\n  scratchTemplate,\n  updateContract,\n  updateContractTemplate,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { unwrap, sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { defaultsByName, getContractCode } from \"./file\";\n\nimport txRegistry from \"./generated/transactions\";\nimport { isObject } from \"./utils\";\n\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nconst extractParameters = async (params) => {\n  let ixName, ixTo, ixAddressMap, ixArgs, ixUpdate;\n\n  if (isObject(params[0])) {\n    const [props] = params;\n    const { name, to, addressMap, args, update } = props;\n\n    if (!name) {\n      throw Error(\"'name' field is missing\");\n    }\n\n    ixName = name;\n    ixTo = to;\n    ixArgs = args;\n    ixAddressMap = addressMap;\n    ixUpdate = update;\n  } else {\n    [ixName, ixTo, ixAddressMap, ixArgs, ixUpdate] = params;\n  }\n\n  const serviceAddress = await getServiceAddress();\n  const addressMap = {\n    ...defaultsByName,\n    FlowManager: serviceAddress,\n    ...ixAddressMap,\n  };\n\n  return {\n    name: ixName,\n    to: ixTo,\n    args: ixArgs,\n    update: ixUpdate,\n    addressMap,\n  };\n};\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (...props) => {\n  const params = await extractParameters(props);\n  const { to, name, addressMap, args, update = false } = params;\n\n  const resolvedAddress = to || (await getServiceAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getServiceAddress());\n  const managerAddress = await getServiceAddress();\n  const hexedCode = hexContract(contractCode);\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [\n    [name, hexedCode, t.String],\n    [managerAddress, t.Address],\n  ];\n\n  // We don't really care about the names of the arguments, but we need unique one for each one of them\n  const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n\n    let i = 0;\n    const argsList = [];\n    const argsWithTypes = args.reduce((acc, arg) => {\n      const unwrapped = unwrap(arg, (value, type) => {\n        const argName = argLetter[i];\n        i += 1;\n        argsList.push(argName);\n        return `${argName}:${type.label}`;\n      });\n      acc = [...acc, ...unwrapped];\n      return acc;\n    }, []);\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${argsWithTypes}`);\n    code = code.replace(\"##ARGS-LIST##\", argsList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","import { deployContract } from \"../../\";\n\nimport { getEnvironment, replaceImportAddresses, reportMissingImports } from \"flow-cadut\";\n\nexport const CODE = `\n  pub contract FlowManager {\n\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    init(){\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n`;\n\n/**\n * Method to generate Cadence code for FlowManager transaction\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n/**\n * Deploys FlowManager transaction to the network\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param Array<*> args - list of arguments\n * param Array<string> - list of signers\n */\nexport const FlowManager = async ({ addressMap = {}, args = [], to, update = false }) => {\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\";\n\n  return deployContract({ code, args, to, update, name });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty. The script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async ({ addressMap = {}, args = [] }) => {\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, checkManager);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getAccountAddress);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\n\n    return vaultRef.balance\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async ({ addressMap = {}, args = [] }) => {\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, getBalance);\n\n  return executeScript({ code, args });\n};\n","import { executeScript } from \"../../\";\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n} from \"flow-cadut\";\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n`;\n\n/**\n * Method to generate cadence code for TestAsset\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n    ...envMap,\n    ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`);\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async ({ addressMap = {}, args = [] }) => {\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, getContractAddress);\n\n  return executeScript({ code, args });\n};\n","import { checkManagerTemplate, checkManager } from \"./checkManager\";\nimport { getAccountAddressTemplate, getAccountAddress } from \"./getAccountAddress\";\nimport { getBalanceTemplate, getBalance } from \"./getBalance\";\nimport { getContractAddressTemplate, getContractAddress } from \"./getContractAddress\";\nimport { getManagerAddressTemplate, getManagerAddress } from \"./getManagerAddress\";\n\nexport default {\n  checkManager,\n  checkManagerTemplate,\n  getAccountAddress,\n  getAccountAddressTemplate,\n  getBalance,\n  getBalanceTemplate,\n  getContractAddress,\n  getContractAddressTemplate,\n  getManagerAddress,\n  getManagerAddressTemplate,\n};\n","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [[hexedContract, t.String]];\n\n  await sendTransaction({\n    code,\n    args,\n    service: true,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  try {\n    await executeScript({\n      code,\n      service: true,\n    });\n  } catch (e) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let contractAddress;\n  try {\n    const code = await registry.scripts.getContractAddressTemplate(addressMap);\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    contractAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContractAddress } from \"./contract\";\nimport { defaultsByName } from \"./file\";\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Resolves import addresses defined in code template\n * @param {string} code - Cadence template code.\n * @returns {{string:string}} - name/address map\n */\nexport const resolveImports = async (code) => {\n  const addressMap = {};\n  const importList = extractImports(code);\n  for (const key in importList) {\n    if (defaultsByName[key]) {\n      addressMap[key] = defaultsByName[key];\n    } else {\n      const address = await getContractAddress(key);\n      addressMap[key] = address;\n    }\n  }\n  return addressMap;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"./scripts/\";\nconst TRANSACTION = \"./transactions/\";\nconst CONTRACT = \"./contracts/\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n  return path.resolve(configBase, `${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from \"@onflow/types\";\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [[address, types.Address]];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [\n    [recipient, types.Address],\n    [amount, types.UFix64],\n  ];\n\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n  try {\n    const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n    const args = [\n      [name, t.String],\n      [managerAddress, t.Address],\n    ];\n    accountAddress = await executeScript({\n      code,\n      args,\n      service: true,\n    });\n  } catch (e) {\n    console.error(\"failed to get account address:\", e);\n  }\n\n  if (accountAddress === null) {\n    try {\n      const code = await registry.transactions.createAccountTemplate(addressMap);\n      const publicKey = await pubFlowKey();\n      const args = [\n        [name, publicKey, t.String],\n        [managerAddress, t.Address],\n      ];\n      const { events } = await sendTransaction({\n        code,\n        args,\n      });\n      const event = events.find((event) => event.type.includes(\"AccountAdded\"));\n      accountAddress = event.data.address;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toBe(null);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  wrappedInteraction.then(({ status, errorMessage }) => {\n    expect(status).toBe(4);\n    expect(errorMessage).toBe(\"\");\n  });\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).resolves.not.toThrow();\n\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  await expect(wrappedInteraction).rejects.not.toBe(null);\n  await expect(wrappedInteraction).rejects.toThrow();\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nclass Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = true;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    this.logging && console[type](message);\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false) {\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.process = spawn(\"flow\", [\"emulator\", \"-v\", \"--http-port\", port, \"--port\", grpc]);\n\n    return new Promise((resolve, reject) => {\n      this.process.stdout.on(\"data\", (data) => {\n        this.log(`LOG: ${data}`);\n        if (data.includes(\"Starting HTTP server\")) {\n          this.log(\"EMULATOR IS UP! Listening for events!\");\n          this.initialized = true;\n          resolve(true);\n        }\n      });\n\n      this.process.stderr.on(\"data\", (data) => {\n        this.log(`ERROR: ${data}`, \"error\");\n        this.initialized = false;\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        this.log(`emulator exited with code ${code}`);\n        this.initialized = false;\n        resolve(true);\n      });\n    });\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(true);\n      }, 50);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","value","flowConfig","config","put","getConfigValue","async","init","basePath","props","port","pkey","process","sansPrefix","address","replace","withPrefix","ec","EC","signWithKey","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","authorization","addr","keyId","account","serviceAddress","tempId","fcl","signingFunction","signature","data","message","isObject","arg","unwrap","arr","convert","type","slice","map","resolveArguments","args","code","first","Array","isArray","asArgument","reduce","acc","mapArgs","mapValuesToCode","extractParameters","ixType","ixCode","ixName","ixSigners","ixArgs","ixService","deployedContracts","params","name","signers","service","Error","getIxTemplate","getScriptCode","getTransactionCode","defaultsByName","resolveImports","getServiceAddress","addressMap","FlowManager","replaceImportAddresses","sendTransaction","extractor","serviceAuth","ix","transaction","payer","proposer","limit","auths","push","authorizations","response","send","tx","onceExecuted","executeScript","script","decode","CODE","createAccountTemplate","fullMap","getEnvironment","reportMissingImports","createAccount","reportMissing","deployContractTemplate","deployContract","initManagerTemplate","initManager","mintTokensTemplate","mintTokens","registerContractTemplate","registerContract","scratchTemplate","scratch","updateContractTemplate","updateContract","txRegistry","hexContract","contract","deployContractByName","ixTo","ixAddressMap","ixUpdate","to","resolvedAddress","contractCode","getContractCode","containerAddress","managerAddress","hexedCode","deployArgs","t","String","Address","i","argsList","argsWithTypes","argName","label","transactions","getManagerAddress","registry","e","getContractAddress","useDefaults","defaultContract","undefined","contractAddress","console","error","REGEXP_IMPORT","getPairs","line","item","filter","collect","extractImports","includes","byName","match","imp","_","Function","importList","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","getPath","configBase","resolve","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","getFlowBalance","raw","makeGetBalance","types","mintFlow","recipient","amount","makeMintTransaction","UFix64","getAccountAddress","accountName","Math","random","pow","toFixed","accountAddress","publicKey","getPublic","rlp","encode","pubFlowKey","events","find","event","expect","global","promise","shallPass","wrappedInteraction","resolves","not","toBe","toThrow","then","status","errorMessage","shallResolve","shallRevert","rejects","shallThrow","spawn","require","constructor","this","initialized","logging","setLogging","log","start","grpc","Promise","reject","stdout","on","stderr","stop","kill","setTimeout"],"mappings":"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"}